1995 JS was created by a guy from Netscape (in a week lol)

European Computer Manufacturers Association
ECMAScript 1 - 1997
ECMAScript 2 - 1998
ECMAScript 3 - 1999
ECMAScript 4 - n/a
ECMAScript 5 - 2009
ECMAScript 6 - 2015

EMCAScript Website
ecma-international.org

ECMAScript repo:
github.com/tc39

Table that shows you browser compatibility with ES6+
https://kangax.github.io/compat-table/es6/

+ originally, you were stuck with "var", but now there's "let"
+ "const" is used to make immutable variables

+ Using String Templates like this:
console.log("Hello", firstName);
This will add spaces between words so: "Hello tom" is what will be output
+ Using String Templates with `` is MUCH better because it'll actually grab new lines as well:
    console.log(`Hi ${firstName}! Thanks!
        Total: $${price}
        Shipping: $${shipping}
        Grand Total: $${price + shipping}`)
NOTE: It'll grab those tabs as well, so be aware


+ A Symbol() is used to add to a Map without any naming conflicts
const id = Symbol();
const courseInfo = {
    title: "JavaScript",
    id: "js-course"
};
courseInfo[id] = 4123;
console.log(courseInfo); // No issues, id still exists
console.log(courseInfo[id]); // Will actually show 4123 correctly


+ Difference between Map and Object
Map: key value pairs, cannot use "." like an object, have to use ".get" and ".set"
Object: more generic that allows for "." to work
Map
let course = new Map();
course.set("react", { description: "ui" });
console.log(course.react.description); // BAD, you cannot do this
console.log(course.get("react").description); // GOOD, this is how to treat a map
+ QUIRKS: JS will iterate through a map based on insertion order, important to note
+ In a way, think of JS Map() as a ordered dictionary/hashmap
+ Here's how to init a Map if ever needed (The interesting thing is that it uses array annotation, kinda):
let details = new Map([
    // Interesting thing to note, you can add as much as you like after the first 2 elements,
    // but JS will completely IGNORE them
    [new Date(), "today", "hello", 3749834753908734087],
    [2, { javascript: ["js", "node", "react"] }],
    ["items", [1, 2]]
]);


+ Sets are collections of values that can be of any type, BUT THEY MUST BE UNIQUE
+ Even if you were to add duplicates, they'll just be ignored
+ It seems like the biggest function for a Set is obviously ".has"
+ To iterate, you cannot do ".map", you must use ".forEach"

+ Spear operator "..." allows elements in an array to either become separate arguments in a function,
or even just separate elements in an array literal:
let cats = ["Ieva", "Sasha"];
let animals = ["Rover", "Brown", ...cats]
console.log(animals)
+ Ieva and Sasha get added right to the end of the array instead of becoming nested (like: [r, b, [i, s]]
really nice syntactic sugar that makes appending arrays MUCH nicer
+ NOTE: This can actually be done for objects as well:
const backpackingMeals = {
    ...daytime,
    nighttime
};


+ Array destructing is very similar to having multiple variables on a line (like in Python)
let [first, second,,,fifth] = ["Boston", "New York", "London", "Portland", "Hell"];
console.log(first); // Boston
console.log(second); // New York
console.log(fifth); // Hell
+ This is very good when having to deal with tuples
+ NOTE: Can also be done with objects, where it's most lucrative inside a function's input variables:
const vacation = {
    destination: "Croatia",
    travelers: 2,
    activity: "swimming",
    cost: "a lot"
};
function marketing({destination, activity}) {
    return `Come to ${destination} and do some ${activity}`;
}
console.log(marketing(vacation));


+ Object Literal Enhancement is just a small nice way to make nicer looking constructors for Objects:
function skier(name, sound) {
    return {
        name,
        sound,
        powderYell: function() {
            let yell = this.sound.toUpperCase();
            console.log(`${yell}! ${yell}!`);
        }
    };
}
+ Normally, "name: name" would have to be done, but we can simply skip on it, and JS will survive it



+ "forEach" is only used for Arrays, Maps, and Sets
const arr = ['cat', 'dog', 'fish'];
arr.forEach(element => {
  console.log(element);
});
+ for...in is used for objects, and will include keys that are added onto the Object
for (variable in object) {
  // do something
}
+ for...of is used for iterables like Arrays, Maps, and Sets; DOES NOT WORK ON OBJECTS
let topics = ["JavaScript", "Node", "CSS"];
for (let topic of topics) {
    console.log(topic);
}
let topics2 = new Map([["HTML", "/topic/html"], ["CSS", "/topic/css"], ["JavaScript", "/topic/javascript"]]);
for (let [key, value] of topics2.entries()) {
    console.log(`${key} is a thing here: ${value}`);
}